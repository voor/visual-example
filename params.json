{"name":"Visual Example","tagline":"Very basic example of some visualizations in angularjs","body":"# visual-example - An example of various visualizations\r\n\r\nThis is sort of a thrown together, lots of cut corners, example of some visualization widgets.\r\n\r\nA lot of assumptions were made about the backend (where the data is derived from).\r\n\r\nThis is by now means something to be used in production -- it's just meant to showcase some very basic GUI interaction.\r\n\r\nThe \"how to\" guide is essentially a copy and paste from the angular-seed, which this set-up is loosely based off of.\r\n\r\n## Getting Started\r\n\r\nTo get you started you can simply clone the visual-example repository and install the dependencies:\r\n\r\n### Prerequisites\r\n\r\nYou need git to clone the visual-example repository. You can get git from\r\n[http://git-scm.com/](http://git-scm.com/).\r\n\r\nI also use a number of node.js tools to initialize and test visual-example. You must have node.js and\r\nits package manager (npm) installed.  You can get them from [http://nodejs.org/](http://nodejs.org/).\r\n\r\n### Clone visual-example\r\n\r\nClone the visual-example repository using [git][git]:\r\n\r\n```\r\ngit clone https://github.com/voor/visual-example.git\r\ncd visual-example\r\n```\r\n\r\n### Install Dependencies\r\n\r\nThere are two kinds of dependencies in this project: tools and angular framework code.  The tools help\r\nyou manage and test the application.\r\n\r\n* You get the tools you depend upon via `npm`, the [node package manager][npm].\r\n* You get the angular code via `bower`, a [client-side code package manager][bower].\r\n\r\nI have preconfigured `npm` to automatically run `bower` so you can simply do:\r\n\r\n```\r\nnpm install\r\n```\r\n\r\nBehind the scenes this will also call `bower install`.  You should find that you have two new\r\nfolders in your project.\r\n\r\n* `node_modules` - contains the npm packages for the tools we need\r\n* `app/bower_components` - contains the angular framework files\r\n\r\n*Note that the `bower_components` folder would normally be installed in the root folder but\r\nangular-seed changes this location through the `.bowerrc` file.  Putting it in the app folder makes\r\nit easier to serve the files by a webserver.*\r\n\r\n### Run the Application\r\n\r\nI have preconfigured the project with a simple development web server.  The simplest way to start\r\nthis server is:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nNow browse to the app at `http://localhost:8000/app/index.html`.\r\n\r\n\r\n## Testing\r\n\r\nThere are two kinds of tests in the angular-seed application: Unit tests and End to End tests.\r\n\r\n### Running Unit Tests\r\n\r\nThe angular-seed app comes preconfigured with unit tests. These are written in\r\n[Jasmine][jasmine], which we run with the [Karma Test Runner][karma]. I provide a Karma\r\nconfiguration file to run them.\r\n\r\n* the configuration is found at `karma.conf.js`\r\n* the unit tests are found next to the code they are testing and are named as `..._test.js`.\r\n\r\nThe easiest way to run the unit tests is to use the supplied npm script:\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nThis script will start the Karma test runner to execute the unit tests. Moreover, Karma will sit and\r\nwatch the source and test files for changes and then re-run the tests whenever any of them change.\r\nThis is the recommended strategy; if your unit tests are being run every time you save a file then\r\nyou receive instant feedback on any changes that break the expected code functionality.\r\n\r\nYou can also ask Karma to do a single run of the tests and then exit.  This is useful if you want to\r\ncheck that a particular version of the code is operating as expected.  The project contains a\r\npredefined script to do this:\r\n\r\n```\r\nnpm run test-single-run\r\n```\r\n\r\n\r\n### End to end testing\r\n\r\nThe angular-seed app comes with end-to-end tests, again written in [Jasmine][jasmine]. These tests\r\nare run with the [Protractor][protractor] End-to-End test runner.  It uses native events and has\r\nspecial features for Angular applications.\r\n\r\n* the configuration is found at `e2e-tests/protractor-conf.js`\r\n* the end-to-end tests are found in `e2e-tests/scenarios.js`\r\n\r\nProtractor simulates interaction with our web app and verifies that the application responds\r\ncorrectly. Therefore, our web server needs to be serving up the application, so that Protractor\r\ncan interact with it.\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nIn addition, since Protractor is built upon WebDriver we need to install this.  The angular-seed\r\nproject comes with a predefined script to do this:\r\n\r\n```\r\nnpm run update-webdriver\r\n```\r\n\r\nThis will download and install the latest version of the stand-alone WebDriver tool.\r\n\r\nOnce you have ensured that the development web server hosting our application is up and running\r\nand WebDriver is updated, you can run the end-to-end tests using the supplied npm script:\r\n\r\n```\r\nnpm run protractor\r\n```\r\n\r\nThis script will execute the end-to-end tests against the application being hosted on the\r\ndevelopment server.\r\n\r\n## Contact\r\n\r\nFor more information on AngularJS please check out http://angularjs.org/\r\n\r\n[git]: http://git-scm.com/\r\n[bower]: http://bower.io\r\n[npm]: https://www.npmjs.org/\r\n[node]: http://nodejs.org\r\n[protractor]: https://github.com/angular/protractor\r\n[jasmine]: http://jasmine.github.io\r\n[karma]: http://karma-runner.github.io\r\n[travis]: https://travis-ci.org/\r\n[http-server]: https://github.com/nodeapps/http-server\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}